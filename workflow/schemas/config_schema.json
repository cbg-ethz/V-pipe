{
    "type": "object",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "V-pipe configuration",
    "description": "The V-pipe workflow can be customized through the configuration file `config.yaml` or `config.json` or, for backward compatibility with the [legacy INI-style format used in V-pipe v1.x/2.x](https://github.com/cbg-ethz/V-pipe/wiki/options), `vpipe.config`. This configuration file is a text file written using a basic structure composed of sections, properties and values. When using [YAML](https://yaml.org/spec/1.0/#id2564813) or [JSON](https://www.json.org/json-en.html) format use these languages associative array/dictionaries in two levels for sections and properties. When using the older [INI format](https://docs.python.org/3/library/configparser.html), sections are expected in squared brackets, and properties are followed by corresponding values.\n\nFurther more, it is possible to specify additional options on the command line using Snakemake's `--configfile` to pass additional YAML/JSON configuration files, and/or using Snakemake's `--config` to pass sections and properties in a [YAML Flow style](https://yaml.org/spec/1.2.0/#Flow)/JSON syntax.\n\nThe order of precedence is:\n_command line options (`--config`, `--configfile`)_ >> _default configuration file (`config/config.yaml` or `config.yaml`)_ >> _legacy configuration INI (`vpipe.config`)_ >> _Virus-specific base config (`virus_based_config`)_ >> _default values_\n\nExample: For instance, we suggest providing as input a tabular file specifying sample unique identifiers (e.g., patient identifiers), and dates for different sequencing runs related to the same patient. The name of this file (here, `samples.tsv`) can be provided by specifying the section as `input` and the property as `samples_file`, as follows in the example below.\n\nIn this document, we provide a comprehensive list of all user-configurable options stratified by sections.",
    "examples": [{"input":{"samples_file":"samples.tsv"}}],
    "properties": {
        "general": {
            "description": "This section of the configuration provides general options that control the overall behavior of the pipeline.",
            "properties": {
                "virus_base_config": {
                    "type": "string",
                    "default": "",
                    "description": "We provide virus-specific base configuration files which contain handy defaults for, e.g., HIV and SARS-CoV-2. Check the git repository's [config subdirectory](https://github.com/cbg-ethz/V-pipe/tree/master/config#virus_base_config) to learn about them.",
                    "examples": ["hiv","sars-cov-2"]
                },
                "preprocessor": {
                    "type": "string",
                    "enum": ["prinseq","skip", ""],
                    "default": "prinseq",
                    "description": "By default trimming and clipping of reads is performed by PRINSEQ [^10] -- a versatile raw read processor for short-reads with many customization options, that we use mostly for Illumina short-read sequencing.\nSome other sequencing platforms, e.g., Oxford Nanopore Technologies, are not compatible with this software and usually perform quality control during the fast5 basecalling and demultiplexing anyway, e.g., by Guppy. Use `skip` to avoid performing preprocessing such already quality-trimmed fastq files.\n\n[^10]:Schmieder, R. and Edwards, R. Quality control and preprocessing of metagenomic datasets. Bioinformatics. 2011.",
                    "examples": ["skip"]
                },
                "aligner": {
                    "type": "string",
                    "enum": ["ngshmmalign","bwa","bowtie","minimap"],
                    "default": "ngshmmalign",
                    "description": "There are three options for mapping reads, either using [`ngshmmalign`](https://github.com/cbg-ethz/ngshmmalign), [BWA MEM (`bwa`)](https://github.com/lh3/bwa) [^1], [Bowtie 2 (`bowtie`)](http://bowtie-bio.sourceforge.net/bowtie2/index.shtml) [^2], or [minimap2 (`minimap`)](https://lh3.github.io/minimap2/)[^11]. To use a different aligner than the default, indicate which aligner you want to use by setting the property aligner.\n\n[^1]: Li, H. Aligning sequence reads, clone sequences and assembly contigs with BWA-MEM. 2013.\n[^2]: Langmead, B. and Salzberg, S. Fast gapped-read alignment with Bowtie 2. Nature Methods. 2012.\n[^11]: Li, H. Minimap2: pairwise alignment for nucleotide sequences. Bioinformatics. 2018.\n\n**Note**: Some virus-specific base configuration specified in `virus_base_config` might change this option's default to a more appropriate aligner for that virus, e.g., depending on its usual diversity and mutation rate.\nYou are still free to override that default in your configuration shall the need arise.",
                    "examples": ["minimap"]
                },
                "primers_trimmer": {
                    "type": "string",
                    "default": "ivar",
                    "enum": ["ivar","samtools"],
                    "description": "There are two options available for trimming primers, either using [iVar trim (`ivar`)](https://andersen-lab.github.io/ivar/html/) [^3] or [Samtools ampliconclip (`samtools`)](http://www.htslib.org/doc/samtools-ampliconclip.html) [^4]. iVar trim is used by default. If you prefer to use Samtools ampliconclip, then indicate so in the configuration file as in the example\n\n[^3]: Grubaugh, N. et al. An amplicon-based sequencing framework for accurately measuring intrahost virus diversity using PrimalSeq and iVar. Genome Biology. 2019.\n[^4]: Danecek P, et al. Twelve years of SAMtools and BCFtools. GigaScience. 2021",
                    "examples": ["samtools"]
                },
                "snv_caller": {
                    "type": "string",
                    "default": "shorah",
                    "enum": ["shorah","lofreq", "viloca"],
                    "description": "There are three options available for calling single nucleotide variants, either using [ShoRAH (`shorah`)](https://github.com/cbg-ethz/shorah) [^5],  [LoFreq (`lofreq`)](https://csb5.github.io/lofreq/) [^6] or [VILOCA (`viloca`)](https://github.com/cbg-ethz/viloca) [^7] . ShoRAH is used by default. If you prefer to use LoFreq, then indicate so in the configuration file as in the example\n\n[^5]: Zagordi, O. et al. ShoRAH: estimating the genetic diversity of a mixed sample from next-generation sequencing data. BMC Bioinformatics. 2011.\n[^6]: Wilm, A. et al. LoFreq: A sequence-quality aware, ultra-sensitive variant caller for uncovering cell-population heterogeneity from high-throughput sequencing datasets. Nucleic Acids Res. 2012.",
                    "examples": ["lofreq"]
                },
                "haplotype_reconstruction": {
                    "type": "string",
                    "default": "savage",
                    "enum": ["savage", "haploclique", "predicthaplo"],
                    "description": "There are three options available for haplotype reconstruction, namely [SAVAGE](https://github.com/HaploConduct/HaploConduct/tree/master/savage) [^7], [HaploClique](https://github.com/cbg-ethz/haploclique) [^8] or [PredictHaplo](https://github.com/cbg-ethz/predicthaplo/) [^9]. SAVAGE is used by default. If you wish to use HaploClique, then indicate it in the configuration file as in the example.\n\n[^7]: Baaijens, J. A. et al., De novo assembly of viral quasispecies using overlap graphs. Genome Res. 2017.\n[^8]: TÃ¶pfer, A. et al. Viral quasispecies assembly via maximal clique finding. PLOS Computational Biology. 2014.\n[^9]: Prabhakaran, S. et al. HIV haplotype inference using a propagating dirichlet process mixture model. IEEE/ACM transactions on computational biology and bioinformatics 11.1. 2013.",
                    "examples": ["haploclique"]
                },
                "threads": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1,
                    "description": "This option should be used to specify the default number of threads for all multi-threaded rules. That is, unless the number of threads is specified for each rule, this value is set as default.",
                    "examples": [4]
                },
                "checksum": {
                    "type": "string",
                    "default": "md5",
                    "enum": ["md5", "sha1", "sha256", "sha224", "sha384", "sha512", "xxh64", "xxh32", "xxh128"],
                    "description": "Sets the algorithm to be used when computing checksums for uploadable data.",
                    "examples": ["sha256"]
                },
                "temp_prefix": {
                    "type": "string",
                    "default": "",
                    "description": "Some step of V-pipe produce temporary files such as, e.g., decompressed intermediate --- i.e. files which aren't kept long-term but are deleted after all steps that needed them have finished. By default, these files are written in the output data directory. This option, makes it is possible to write them in a different directory instead. Use this option to, e.g., leverage a faster cluster-local storage or avoid wasting backup space on a snapshotted storage. You might want to consult the documentation provided by your HPC.",
                    "examples": ["temp", "/cluster/scratch"]
                },
                "tsvbased": {
                    "type": "integer",
                    "enum": [0,1],
                    "default": 1,
                    "description": "Specify whether TSV files like coverage and base counts should be 1-based (i.e.: the first base pair position is called `1`) like standard practice used in biology and most text formats such as VCF and GFF, or should be 0-based (i.e.: the first base pair position is called `0`) like in several Python tools such as pysam and the BED format.\n\nBy default V-pipe uses 1-based TSV file (position column starts with `1`), but this option change the behaviour.",
                    "examples": [0]
                },
                "id_separator": {
                    "type": "string",
                    "default": "/",
                    "description": "Charater to use when assembling the two levels (e.g.: sample and a date), into a column title to be used in a report TSV file\n\nE.g., with this sample file\n```tsv\npatient1    20100113\npatient1    20110202\npatient2    20081130\n```\nthe coverage TSV file's column will be called `patient1/20100113`, `patient1/20110202` and `patient2/20081130`.",
                    "examples": [ "-" ]
                }

            },
            "default": {},
            "type": "object"
        },
        "input": {
            "description": "Properties in this section of the configuration control the input of the pipeline.",
            "properties": {
                "datadir": {
                    "type": "string",
                    "default": "samples/",
                    "description": "The input file for the workflow will be searched in this directory.\n\nV-pipe expects the input samples to be organized in a two-level directory hierarchy.\n\n - The first level can be, e.g., patient samples or biological replicates of an experiment.\n - The second level can be, e.g., different sampling dates or different sequencing runs of the same sample.\n - Inside that directory, the sub-directory `raw_data` holds the sequencing data in FASTQ format (optionally compressed with GZip).\n\nFor example:\n```text\nðsamples\nâââðpatient1\nâ  âââð20100113\nâ  â  âââðraw_data\nâ  â     âââð§¬patient1_20100113_R1.fastq\nâ  â     âââð§¬patient1_20100113_R2.fastq\nâ  âââð20110202\nâ     âââðraw_data\nâ        âââð§¬patient1_20100202_R1.fastq\nâ        âââð§¬patient1_20100202_R2.fastq\nâââðpatient2\n   âââð20081130\n      âââðraw_data\n         âââð§¬patient2_20081130_R1.fastq.gz\n         âââð§¬patient2_20081130_R2.fastq.gz\n```",
                    "examples": [ "tests/data/hiv/", "tests/data/sars-cov-2/" ]
                },
                "paired": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicate whether the input sequencing reads correspond to paired-end reads.\n\nPaired-ended reads need to be in split files with `_R1` and `_R2` suffixes:\n```text\nðraw_data\nâââð§¬patient2_20081130_R1.fastq.gz\nâââð§¬patient2_20081130_R2.fastq.gz\n```",
                    "examples": [ false ]
                },
                "fastq_suffix": {
                    "type": "string",
                    "default": "",
                    "description": "V-pipe expects paired-end reads to be in files that end in  `_R1` and `_R2` exactly right before the file extension, e.g., `_R1.fastq.gz`, because this is how the workflow finds and recognizes them.\n\nBut Illumina's bcl2fastq demultiplexer might introduce additional strings, e.g., `_R2_001.fast.gz` or, depending on its _mismatches_ settings, e.g., `_R2_001_MM_1.fast.gz`. Use this options to specify anything which should go between the  `_R1` and `_R2` endings and the file extension.",
                    "examples": [ "_001", "_001_MM_1"]
                },
                "samples_file": {
                    "type": "string",
                    "default": "config/samples.tsv",
                    "description": "File containing sample unique identifiers and dates as tab-separated values, e.g.,\n```tsv\npatient1\t20100113\npatient1\t20110202\npatient2\t20081130\n```\n\nHere, we have two samples from patient 1 and one sample from patient 2. By default, V-pipe searches for a file named samples.tsv, if this file does not exist, a list of samples is built by globbing datadir directory contents.\n\nOptionally, the samples file can contain a third column specifying the read length. This is particularly useful when samples are sequenced using protocols with different read lengths.\n\nOptionally, a fourth column can contain a short name of a protocol (e.g.: `v3`) that is detailed in the file specified in [`input` => `protocols_file`](#input_protocols_file). This is useful if protocol details such as primers change over time, e.g. to adapt to new variants with SNV breaking primer binding affinity.\n\nStandardized Snakemake workflows place their tables inside the `config/` subdirectory, but using this options you can specify alternate locations, e.g., the current working directory (as done in legacy V-pipe v1.x/2.x).",
                    "examples": [ "samples.tsv" ]
                },
                "protocols_file": {
                    "type": "string",
                    "default": "",
                    "description": "When different samples have been processed with different library protocols, this file specifies a lookup table with per-protocol specific (primers bed and fasta), eg.:\n```yaml\nv41:\n  name: SARS-CoV-2 ARTIC V4.1\n  inserts_bedfile: references/primers/v41/SARS-CoV-2.insert.bed\n  primers_bedfile: references/primers/v41/SARS-CoV-2.primer.bed\n  primers_file: references/primers/v41/SARS-CoV-2.tsv\n  primers_fasta: references/primers/v41/SARS-CoV-2.primer.fasta\nv4:\n  name: SARS-CoV-2 ARTIC V4\n  inserts_bedfile: references/primers/v4/SARS-CoV-2.insert.bed\n  primers_bedfile: references/primers/v4/SARS-CoV-2.primer.bed\n  primers_file: references/primers/v4/SARS-CoV-2.tsv\n  primers_fasta: references/primers/v4/ARTIC_v4.fasta\nv3:\n  name: SARS-CoV-2 ARTIC V3\n  inserts_bedfile: references/primers/v3/nCoV-2019.insert.bed\n  primers_bedfile: references/primers/v3/nCoV-2019.primer.bed\n  primers_file: references/primers/v3/nCoV-2019.tsv\n  primers_fasta: references/primers/v3/ARTIC_v3.fasta\n```\n\nThe short name can then be referenced in the [samples TSV table file](#input_samples_file):\n```tsv\nsample_a\t20211108\t250\tv3\nsample_b\t20220214\t250\tv4\n```\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.",
                    "examples": [ "resources/sars-cov-2/primers.yaml" ]
                },
                "read_length": {
                    "type": "integer",
                    "default": 250,
                    "description": "Default for those samples whose read length isn't specified explicitly in the optional third column of the `samples.tsv` table.",
                    "examples": [ "100" ]
                },
                "primers_bedfile": {
                    "type": "string",
                    "default": "",
                    "description": "A bed file with primers position to trim the alignment output\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.\n\n**Note**: individual sample can override this using the 4th column in the [samples TSV table file](#input_samples_file) and the [protocols YAML look-up table](#input_protocols_file).",
                    "examples": [ "resources/sars-cov-2/primers/v3/nCoV-2019.primer.bed" ]
                },
                "inserts_bedfile": {
                    "type": "string",
                    "default": "",
                    "description": "A bed file with inserts position of the multiplex PCR output to use with amplicon-based analysis.\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.\n\n**Note**: individual sample can override this using the 4th column in the [samples TSV table file](#input_samples_file) and the [protocols YAML look-up table](#input_protocols_file).",
                    "examples": [ "resources/sars-cov-2/primers/v3/nCoV-2019.primer.bed" ]
                },
                "trim_percent_cutoff": {
                    "type": "number",
                    "default": 0.8,
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Using this parameter, the user can specify the read-length threshold that should be applied during the quality trimming as a percentage (0 < `trim_percent_cutoff` < 1).",
                    "examples": [ 0.9 ]
                },
                "reference": {
                    "type": "string",
                    "default": "results/cohort_consensus.fasta",
                    "description": "Reference sequence to use for the alignment step\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default to a reference for that virus.\nYou are still free to override that default in your configuration shall the need arise.",
                    "examples": [ "resources/hiv/HXB2.fasta", "resources/sars-cov-2/NC_045512.2.fasta" ]
                },
                "gff_directory": {
                    "type": "string",
                    "default": "",
                    "description": "A directory containing gff files that can be optionally used to annotate the reference genome in the visualization, e.g., with genes, mature products, protein domains, regions of interests, etc.\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.",
                    "examples": [ "resources/hiv/gffs/", "resources/sars-cov-2/gffs/" ]
                },
                "metainfo_file": {
                    "type": "string",
                    "default": "",
                    "description": "An associative array providing user-friendly name to display for each annotation .gff file in the `gff_directory`\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.",
                    "examples": [ "resources/hiv/metainfo.yaml", "resources/sars-cov-2/metainfo.yaml" ]
                },
                "genes_gff": {
                    "type": "string",
                    "default": "",
                    "description": "The specific annotation GFF file that has provides the _genes_ position along the genome for reports that mention specific genes such frameshift-deletions-check.\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.\n\n**Note**: if not set, V-pipe will try auto-selecting a .gff file from the `gff_directory`.",
                    "examples": [ "resources/hiv/gffs/GCF_000864765.1_ViralProj15476_genomic.gff", "resources/sars-cov-2/gffs/Genes_NC_045512.2.GFF3" ]
                },
                "primers_file": {
                    "type": "string",
                    "default": "",
                    "description": "A table with primers to display on the visualization\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.\n\n**Note**: individual sample can override this using the 4th column in the [samples TSV table file](#input_samples_file) and the [protocols YAML look-up table](#input_protocols_file).",
                    "examples": [ "resources/sars-cov-2/primers/v3/nCoV-2019.tsv" ]
                },
                "variants_def_directory": {
                    "type": "string",
                    "default": "",
                    "description": "Directory holding a list of COJAC YAML definitions of variants of concern that will be used for search of variant signatures\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.",
                    "examples": [ "resources/sars-cov-2/voc/" ]
                },
                "phylogeny_data": {
                    "type": "string",
                    "default": "",
                    "description": "A FASTQ file with sequences of interest\n\n**Note**: These sequences are used, together with the consensus sequence, to build a phylogenetic tree.",
                    "examples": [ "resources/sars-cov-2/phylogeny/selected_covid_sequences.fasta" ]
                }
            },
            "default": {},
            "type": "object"
        },
        "output": {
            "description": "Properties in this section of the configuration control the output of the pipeline.",
            "properties": {
                "datadir": {
                    "type": "string",
                    "default": "results",
                    "description": "The workflow will write its output files into this directory. This will follow the same structure as for the input.\n\nFor each sample, V-pipe produces several output files that are located in the corresponding sample-specific directory. First, the alignment file and consensus sequences are located in the `alignments` and `references` subdirectories, respectively. Second, output files containing SNVs and viral haplotypes are located in the `variants` subdirectories.\n\nUsing the sample example as in the [`input`](#input_datadir) section, the output files for the two patient samples will be located in the following subdirectories:\n```text\nðresults\nâââðpatient1\nâ  âââð20100113\nâ  â  âââðalignments\nâ  â  |  âââREF_aln.bam\nâ  â  âââðreferences\n|  |  |  âââconsensus.bcftools.fasta\n|  |  |  âââref_ambig.fasta\n|  |  |  âââref_majority.fasta\n|  |  âââðvariants\n|  |     âââðSNVs\n|  |     |  âââsnvs.vcf\n|  |     âââðglobal\n|  |        âââcontigs_stage_c.fasta\nâ  âââð20110202\nâ     âââðalignments\nâ     |  âââREF_aln.bam\nâ     âââðreferences\n|     |  âââconsensus.bcftools.fasta\n|     |  âââref_ambig.fasta\n|     |  âââref_majority.fasta\n|     âââðvariants\n|        âââðSNVs\n|        |  âââsnvs.vcf\n|        âââðglobal\n|           âââcontigs_stage_c.fasta\nââðpatient2\n  âââðalignments\n  |  âââREF_aln.bam\n  âââðreferences\n  |  âââconsensus.bcftools.fasta\n  |  âââref_ambig.fasta\n  |  âââref_majority.fasta\n  âââðvariants\n     âââðSNVs\n     |  âââsnvs.vcf\n     âââðglobal\n        âââcontigs_stage_c.fasta\n```\n\n - Standardized Snakemake workflows place their output in a `results` subdirectory\n - If your prefer the output written, e.g., to the same `samples/` subdirectory as the input (as used to be done in legacy V-pipe v1.x/2.x), you can use this options you can specify alternate target locations.",
                    "examples": ["samples"]
                },
                "cohortdir": {
                    "type": "string",
                    "default": "",
                    "description": "In addition, V-pipe can optionally generate a few cohort-wide results, such as a current cohort consensus fasta file, or a TSV file containing the frequencies of all minor alleles that differ from the consensus among analyzed samples.\nBy default, these output files are located at the base of the [`output` `datadir`](#output_datadir), outside of the two-level per sample structure:\n```console\nresults\nâââminority_variants.tsv\nâââcohort_consensus.fasta\nâââpatient1\nâ  âââ20100113\nâ  â  âââalignments\nâ¦\n```\n\nIf you prefer instead, e.g., such cohort-wide results behind written in a subdirectory of the working directory at the same level as the `datadir`s, you  can use this options you can specify alternate subdirectory relative to the `datadir` property. (Use `..` prefix if you want instead your cohort-wide results to be in a directory at the sample level as `samples/` and `results/`. See the example below to recreate the `variants/` directory used by legacy V-pipe v1.x/2.x).",
                    "examples": ["../variants"]
                },
                "QA": {
                    "type": "boolean",
                    "default": false,
                    "description": "V-pipe can produce several outputs to assess the quality of the output of its steps, e.g., checking whether a sample's consensus sequence generated by bctfools does result in frameshifting indels and writing a report in sample's `â¦/references/frameshift_deletions_check.tsv`. Such reports can be useful when submitting sequences to GISAID.\n\nThis option turns on such QA features.",
                    "examples": [true]
                },
                "trim_primers": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option indicates that the samples come from PCR amplification and the primers should be trimmed from amplicons in the alignment file. The trimmed read are written to each sample's `â¦/variants/SNVs/REF_aln_trim.bam`.\n\nUsing this option requires either specifying a primers bed file in [`input` => `protocols_file`](#input_primers_bedfile), or using a [4 column input samples TSV file](#input_samples_file) and specify a protocol look-up YAML file in [`input` => `protocols_file`](#input_protocols_file).",
                    "examples": [true]
                },
                "snv": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option selects whether the SNV caller step should be executed and its output written to each sample's `â¦/variants/SNVs/snvs.csv`.",
                    "examples": [true]
                },
                "local": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option activates local haplotype reconstruction (only available when using ShoRAH or VILOCA).",
                    "examples": [true]
                },
                "global": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option turns on global haplotype reconstruction.",
                    "examples": [true]
                },
                "visualization": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option selects whether to generate HTML visualization of the SNVs in each sample's `â¦/visualization/index.html`.",
                    "examples": [true]
                },
                "diversity": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option turns on the computation of diversity measures in each sample.",
                    "examples": [true]
                },
                "dehumanized_raw_reads": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option turns on dehumanization of the raw reads (i.e. removal of host's reads) and generates the file `dehuman.cram`. This is useful to prepare raw reads for upload on public databases such as, e.g. ENA (European Nucleotide Archive).\n\nThis only applies to the upload and does not affect the main workflow.",
                    "examples": [true]
                },
                "upload": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option can be used for assistance in incremental upload of data. See section `upload` for an example.",
                    "examples": [true]
                }
            },
            "default": {},
            "type": "object"
        },
        "applications": {
            "description": "The path to the different software packages can be specified using this section.\n\nIt is especially useful when dependencies are not obtained via conda such as VICUNA, and when the software packages are not in the `PATH`.\n\n**Note** we strongly recommend to use conda environments, by adding the `--use-conda` flag to the V-pipe execution command, e.g. `./vpipe --use-conda`. If you prefer to use your own installations, this section allows you to specify the location of the executable files.",
            "examples":[{"bwa":"/path/to/bwa","haploclique":"/path/to/haploclique"}],
            "properties": {
                "gunzip": {
                    "type": "string",
                    "default": "gunzip"
                },
                "zstd": {
                    "type": "string",
                    "default": "zstd"
                },
                "xsv": {
                    "type": "string",
                    "default": "xsv"
                },
                "prinseq": {
                    "type": "string",
                    "default": "prinseq-lite.pl"
                },
                "fastqc": {
                    "type": "string",
                    "default": "fastqc"
                },
                "vicuna": {
                    "type": "string",
                    "default": "vicuna",
                    "description":"Due to a special license, VICUNA is **not** available from bioconda and must be installed from [its original website](https://www.broadinstitute.org/viral-genomics/vicuna).\nUse this option to specify where you have installed its executable."
                },
                "indelfixer": {
                    "type": "string",
                    "default": "InDelFixer"
                },
                "consensusfixer": {
                    "type": "string",
                    "default": "ConsensusFixer"
                },
                "picard": {
                    "type": "string",
                    "default": "picard"
                },
                "bwa": {
                    "type": "string",
                    "default": "bwa"
                },
                "bowtie_idx": {
                    "type": "string",
                    "default": "bowtie2-build"
                },
                "bowtie": {
                    "type": "string",
                    "default": "bowtie2"
                },
                "minimap": {
                    "type": "string",
                    "default": "minimap2"
                },
                "samtools": {
                    "type": "string",
                    "default": "samtools"
                },
                "extract_consensus": {
                    "type": "string",
                    "default": "extract_consensus"
                },
                "matcher": {
                    "type": "string",
                    "default": "matcher"
                },
                "frameshift_deletions_checks": {
                    "type": "string",
                    "default": "frameshift_deletions_checks"
                },
                "paired_end_read_merger": {
                    "type": "string",
                    "default": "paired_end_read_merger"
                },
                "mafft": {
                    "type": "string",
                    "default": "mafft"
                },
                "ngshmmalign": {
                    "type": "string",
                    "default": "ngshmmalign"
                },
                "convert_reference": {
                    "type": "string",
                    "default": "convert_reference"
                },
                "extract_seq": {
                    "type": "string",
                    "default": "extract_seq"
                },
                "coverage_stats": {
                    "type": "string",
                    "default": "coverage_stats"
                },
                "remove_gaps_msa": {
                    "type": "string",
                    "default": "remove_gaps_msa"
                },
                "ivar": {
                    "type": "string",
                    "default": "ivar"
                },
                "aln2basecnt": {
                    "type": "string",
                    "default": "aln2basecnt"
                },
                "gather_coverage": {
                    "type": "string",
                    "default": "gather_coverage"
                },
                "minority_freq": {
                    "type": "string",
                    "default": "minority_freq"
                },
                "extract_coverage_intervals": {
                    "type": "string",
                    "default": "extract_coverage_intervals"
                },
                "shorah": {
                    "type": "string",
                    "default": "shorah shotgun"
                },
                "viloca": {
                    "type": "string",
                    "default": "viloca run"
                },
                "lofreq": {
                    "type": "string",
                    "default": "lofreq"
                },
                "bcftools": {
                    "type": "string",
                    "default": "bcftools"
                },
                "haploclique": {
                    "type": "string",
                    "default": "haploclique"
                },
                "compute_mds": {
                    "type": "string",
                    "default": "compute_mds"
                },
                "savage": {
                    "type": "string",
                    "default": "savage"
                },
                "predicthaplo": {
                    "type": "string",
                    "default": "predicthaplo"
                },
                "cojac": {
                    "type": "string",
                    "default": "cojac"
                },
                "lollipop": {
                    "type": "string",
                    "default": "lollipop"
                }
            },
            "default": {},
            "type": "object"
        },
        "gunzip": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 32
                },
                "time": {
                    "type": "integer",
                    "default": 60
                }
            },
            "default": {},
            "type": "object"
        },
        "extract": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 4096
                },
                "time": {
                    "type": "integer",
                    "default": 20
                }
            },
            "default": {},
            "type": "object"
        },
        "preprocessing": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/preprocessing.yaml"
                },
                "extra": {
                    "type": "string",
                    "default": "-ns_max_n 4 -min_qual_mean 30 -trim_qual_left 30 -trim_qual_right 30 -trim_qual_window 10",
                    "description": "We use software PRINSEQ [^10] for quality control. By default, we use options `-ns_max_n 4 -min_qual_mean 30 -trim_qual_left 30 -trim_qual_right 30 -trim_qual_window 10`, which indicates to trim reads using a sliding window with size 10 bp, and trim bases if their quality scores are less than 30. Additionally, reads are filtered out if the average quality score is below 30 and if they contain more than 4 N's. The user can choose to overwrite the default settings or use additional parameters by using the property `extra`. E.g., if many reads are filtered out in this step, the user can choose to lower the quality threshold as indicated in the example.\n[^10]:Schmieder, R. and Edwards, R. Quality control and preprocessing of metagenomic datasets. Bioinformatics. 2011.\n\nPlease do not modify PRINSEQ options `-out_format`, `-out_good`, nor `-min_len`. Instead of using `-min_len` to define threshold on the read length after trimming, use [`input` => `trim_percent_cutoff`](#input_trim_percent_cutoff).",
                    "examples": ["-ns_max_n 4 -min_qual_mean 20 -trim_qual_left 20 -trim_qual_right 20 -trim_qual_window 10"]
                }
            },
            "default": {},
            "type": "object"
        },
        "fastqc": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/fastqc.yaml"
                },
                "threads": {
                    "type": "integer",
                    "default": 6
                },
                "no_group": {
                    "type": "boolean",
                    "default": false
                }
            },
            "default": {},
            "type": "object"
        },
        "initial_vicuna": {
            "description": "__NOTE__ The conda environment for this rule doesnât work properly. The package on the bioconda channel, mvicuna, is slightly different from VICUNA and it has different command-line arguments. Moreover, VICUNA and mvicuna are no longer maintained. In the future, this rule will be deprecated.",
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1000
                },
                "time": {
                    "type": "integer",
                    "default": 600
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/initial_vicuna.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "initial_vicuna_msa": {
            "description": "**NOTE** Obtaining a initial reference *de novo* is implemented for more than one sample.",
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 10000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/initial_vicuna_msa.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "create_vicuna_initial": {
            "properties": {
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "hmm_align": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 1435
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/hmm_align.yaml"
                },
                "leave_msa_temp": {
                    "type": "boolean",
                    "default": false,
                    "description": "This option is useful for debugging purposes.",
                    "examples": [true]
                },
                "extra": {
                    "type": "string",
                    "default": "",
                    "description": "Pass additional options to run ngshmmalign\n\nV-pipe uses option `-R <path/to/initial_reference>`, thus option `-r arg` is not allowed. Also, instead of passing `-l` via the property `extra`, set [`leave_msa_temp`](#hmm_align_leave_msa_temp) to `True`. Lastly, please do not modify options `-o arg`, `-w arg`, `-t arg`, and `-N arg`. These are already managed by V-pipe."

                }
            },
            "default": {},
            "type": "object"
        },
        "sam2bam": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 5000
                },
                "time": {
                    "type": "integer",
                    "default": 30
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/sam2bam.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "bwa_QA": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/bwa_QA.yaml"
                },
                "ref_panel": {
                    "type": "string",
                    "default": "",
                    "description": "Panel of diverse references against which to align reads as a QA step\n\n**Note**: The virus-specific base configuration specified in [`general` => `virus_base_config`](#general_virus_base_config) will most likely change this option's default.\nYou are still free to override that default in your configuration shall the need arise.",
                    "examples": [ "resources/hiv/5-Virus-Mix.fasta" ]
                }
            },
            "default": {},
            "type": "object"
        },
        "coverage_QA": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                },
                "target": {
                    "type": "string",
                    "default": "HXB2:6614-6812,7109-7217,7376-7478,7601-7634"
                }
            },
            "default": {},
            "type": "object"
        },
        "msa": {
        "description": "This rule takes all previously aligned reads by `hmm_align`. Therefore, resources should be allocated accordingly.",
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 10000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/msa.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "convert_to_ref": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 8000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "ref_bwa_index": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/bwa_align.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "bwa_align": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/bwa_align.yaml"
                },
                "extra": {
                    "type": "string",
                    "default": "",
                    "description": "With property `extra`, users can pass additional options to run BWA MEM. For more details on BWA MEM configurable options refer to the software [documentation](http://bio-bwa.sourceforge.net/bwa.shtml)."
                }
            },
            "default": {},
            "type": "object"
        },
        "ref_bowtie_index": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/bowtie_align.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "bowtie_align": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/bowtie_align.yaml"
                },
                "phred": {
                    "type": "string",
                    "default": "--phred33",
                    "enum": ["--phred33","--phred64"],
                    "description":"Indicate if qualities are Phred+33 (default) or Phred+64 (`--phred64`).",
                    "examples": ["--phred64"]
                },
                "preset": {
                    "type": "string",
                    "default": "--local --sensitive-local",
                    "description": "Specify Bowtie 2 presets."
                },
                "maxins": {
                    "type": "integer"
                },
                "extra": {
                    "type": "string",
                    "default": "",
                    "description": "Pass additional options to run Bowtie 2. V-pipe handles the input and output files, as well as the reference sequence. Thus, do not modify these options\nFor more details on Bowtie 2 configurable options refer to the software [documentation](http://bowtie-bio.sourceforge.net/bowtie2/manual.shtml)."
                }
            },
            "default": {},
            "type": "object"
        },
        "ref_minimap_index": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/minimap_align.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "minimap_align": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer"
                },
                "preset": {
                    "type": "string",
                    "default": "sr",
                    "enum": [ "map-ont", "map-hifi", "map-pb", "asm5", "asm10", "asm20", "splice", "splice:hq", "sr", "ava-pb", "ava-ont" ],
                    "description": "Specify minimap2 preset options. See [minimape's documentation](https://lh3.github.io/minimap2/minimap2.html#8) for details about each of the presets.",
                    "examples": ["map-ont"]
                },
                "secondary": {
                    "type": "boolean",
                    "default": false,
                    "description": "By default V-pipe ignores Minimap2's secondary alignment(s) and only considers the primary one (A secondary alignment occurs when a given read could align reasonably well to more than one place). This flags turns back on Minimap2's secondary alignments, and also includes their sequences in the output BAM file.",
                    "examples": [ true ]
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/minimap_align.yaml"
                },
                "extra": {
                    "type": "string",
                    "default": "",
                    "description": "With property `extra`, users can pass additional options to run minimap2. For more details on minimap2 configurable options refer to the software [documentation](https://github.com/lh3/minimap2)."
                }
            },
            "default": {},
            "type": "object"
        },
        "primerstrim" : {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/primerstrim.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "consensus_sequences": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                },
                "min_coverage": {
                    "type": "integer",
                    "default": 50,
                    "description": "Minimum read depth for reporting variants per locus."
                },
                "n_coverage": {
                    "type": "integer",
                    "default": 5,
                    "description": "Read count below which ambiguous base 'n' is reported."
                },
                "qual_thrd": {
                    "type": "integer",
                    "default": 15,
                    "description": "Minimum phred quality score for a base to be included."
                },
                "min_freq": {
                    "type": "number",
                    "default": 0.05,
                    "minimum": 0,
                    "maximum": 1,
                    "description": "Minimum frequency for an ambiguous nucleotide."
                }
            },
            "default": {},
            "type": "object"
        },
        "consensus_bcftools": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/bcftools.yaml"
                },
                "max_coverage": {
                    "type": "integer",
                    "default": 10000
                },
                "mask_coverage_threshold": {
                    "type": "integer",
                    "default": 10
                },
                "ambiguous_base_coverage_threshold": {
                    "type": "number",
                    "default": 0.05,
                    "minimum": 0,
                    "maximum": 1
                }
            },
            "default": {},
            "type": "object"
        },
        "consseq_QA": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 4096
                },
                "time": {
                    "type": "integer",
                    "default": 30
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/consseq_qa.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "frameshift_deletions_checks": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 30
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "paired_end_read_merger": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 30
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/paired_end_read_merger.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "basecounts": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 30
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "coverage": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1250
                },
                "time": {
                    "type": "integer",
                    "default": 30
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "minor_variants": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                },
                "min_coverage": {
                    "type": "integer",
                    "default": 100,
                    "description": "Minimum read depth for reporting variants per locus.",
                    "examples": [50]
                },
                "frequencies": {
                    "type": "boolean",
                    "default": false,
                    "description": "Output a numpy array file containing frequencies of all bases, including gaps and also the most abundant base across samples.",
                    "examples": [true]
                }
            },
            "default": {},
            "type": "object"
        },
        "coverage_intervals": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1000
                },
                "time": {
                    "type": "integer",
                    "default": 30
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                },
                "overlap": {
                    "type": "boolean",
                    "default": false,
                    "description": "Construct intervals based on overlapping windows of the read alignment. By default, regions with high coverage are built based on the position-wise read depth.",
                    "examples": [true]
                },
                "coverage": {
                    "type": "integer",
                    "default": 50,
                    "description": "Minimum read depth. A region spanning the reference genome is returned if `coverage` is set to 0.",
                    "examples": [ 0 ]
                },
                "liberal": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicate whether to apply a more liberal shifting on intervals' right-endpoint.",
                    "examples": [false]
                }
            },
            "default": {},
            "type": "object"
        },
        "snv": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 10000
                },
                "time": {
                    "type": "integer",
                    "default": 2880
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/snv.yaml"
                },
                "consensus": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicate whether to use the cohort-consensus sequence from the analyzed samples (output from `minor_variants` rule located in the cohort-wide output `results/cohort_onsensus.fasta`) or the reference sequence by setting this option to False.",
                    "examples": [false]
                },
                "alpha": {
                    "type": "number",
                    "default": 0.1,
                    "description": "Hyperparameter used for instantiating a new cluster."
                },
                "ignore_indels": {
                    "type": "boolean",
                    "default": false,
                    "description": "Ignore SNVs adjacent to indels."
                },
                "posterior_threshold": {
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1,
                    "default": 0.9
                },
                "coverage": {
                    "type": "integer",
                    "default": 0,
                    "description": "Omit windows with coverage less than this value.",
                    "examples": [50]
                },
                "shift": {
                    "type": "integer",
                    "default": 3,
                    "description": "ShoRAH performs local haplotype reconstruction on windows of the read alignment. The overlap between these windows is defined by the window shifts. By default, it is set to 3, i.e., apart from flanking regions each position is covered by 3 windows."
                },
                "keep_files": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicate whether to move files produced in previous/interrupted runs to subdirectory named `old`",
                    "examples": [true]
                },
                "localscratch": {
                    "type": "string",
                    "default": ""
                }
            },
            "default": {},
            "type": "object"
        },
        "samtools_index": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 20
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/lofreq.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "viloca": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 10000
                },
                "threads": {
                    "type": "integer"
                },
                "time": {
                    "type": "integer",
                    "default": 2880
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/viloca.yaml"
                },
                "consensus": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicate whether to use the cohort-consensus sequence from the analyzed samples (output from `minor_variants` rule located in the cohort-wide output `results/cohort_onsensus.fasta`) or the reference sequence by setting this option to False.",
                    "examples": [false]
                },
                "merge_paired_end_reads": {
                    "type": "boolean",
                    "default": false,
                    "description": "Merge paired-end reads in the preprocessing. This is a preprocessing snakemake rule.",
                    "examples": [false]
                },
                "shift": {
                    "type": "integer",
                    "default": 3,
                    "description": "VILOCA performs local haplotype reconstruction on windows of the read alignment. The overlap between these windows is defined by the window shifts. By default, it is set to 3, i.e., apart from flanking regions each position is covered by 3 windows."
                },
                "insert_bedfile": {
                    "type": "string",
                    "default": "None",
                    "description": "VILOCA performs local haplotype reconstruction on windows of the read alignment. In a first step the alignment is tiled into local regions. This can be done uniformly then set this value None, otherwise path to an (optional) insert file (primer tiling strategy)"
                },
                "mode": {
                    "type": "string",
                    "default": "use_quality_scores",
                    "enum": ["shorah","learn_error_params","use_quality_scores"],
                    "description": "Mode in which to run VILOCA: shorah,  learn_error_params, use_quality_scores. If quality scores are available, we recommend this option"
                },
                "extra": {
                    "type": "string",
                    "default": "",
                    "description": "Pass additional options to run `viloca`"
                }
            },
            "default": {},
            "type": "object"
        },
        "lofreq": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 60
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/lofreq.yaml"
                },
                "consensus": {
                    "type": "boolean",
                    "default": true,
                    "description": "Indicate whether to use the cohort-consensus sequence from the analyzed samples (output from `minor_variants` rule located in the cohort-wide output `results/cohort_onsensus.fasta`) or the reference sequence by setting this option to False.",
                    "examples": [false]
                },
                "extra": {
                    "type": "string",
                    "default": "",
                    "description": "Pass additional options to run `lofreq call`"
                }
            },
            "default": {},
            "type": "object"
        },
        "alignment_coverage": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1000
                },
                "time": {
                    "type": "integer",
                    "default": 60
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                },
                "coverage": {
                    "type": "integer",
                    "default": 5
                }
            },
            "default": {},
            "type": "object"
        },
        "stats": {
            "properties": {
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/sam2bam.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "savage": {
            "description": "**NOTE** This rule only works in Linux.",
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 10000
                },
                "time": {
                    "type": "integer",
                    "default": 1435
                },
                "threads": {
                    "type": "integer"
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/savage.yaml"
                },
                "split": {
                    "type": "integer",
                    "default": 20,
                    "description": "Size of the batches of reads to be processed by SAVAGE. It is recommended that 500 < coverage/`split` < 1000."
                }
            },
            "default": {},
            "type": "object"
        },
        "haploclique": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 10000
                },
                "time": {
                    "type": "integer",
                    "default": 1435
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/haploclique.yaml"
                },
                "relax": {
                    "type": "boolean",
                    "default": true,
                    "description": "If set to `True` (default) a predefined set of parameter values is used for drawing edges between reads in the read graph."
                },
                "no_singletons": {
                    "type": "boolean",
                    "default": true,
                    "description": "Singletons are defined as proposed haplotypes which are supported by a single read. If this property is set to `True`, singletons are discarded."
                },
                "no_prob0": {
                    "type": "boolean",
                    "default": true,
                    "description": "If set to `True` (default) probability of the overhangs is ignored."
                },
                "clique_size_limit": {
                    "type": "integer",
                    "default": 3,
                    "description": "Sets a threshold to limit the size of cliques."
                },
                "max_num_cliques": {
                    "type": "integer",
                    "default": 10000,
                    "description": "Indicates the maximum number of clique to be considered in the next iteration."
                },
                "extra_parameters": {
                    "type": "string",
                    "default": "",
                    "description": "Additional parameters to be passed to haploclique.\n\nWarning: this won't overwrite the other options (e.g. `clique_size_limi` and `max_num_cliques` should still be set via their [own](#haploclique_clique_size_limit) [respective](#haploclique_max_num_cliques) properties, do not pass parameters `--limit_clique_size=` nor `--max_cliques=` via this `extra` property)."
                }
            },
            "default": {},
            "type": "object"
        },
        "haploclique_visualization": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/smallgenomeutilities.yaml"
                },
                "region_start": {
                    "type": "integer",
                    "default": 0,
                    "description": "Use to specify a region of interest."
                },
                "region_end": {
                    "type": "integer",
                    "default": -1,
                    "description": "Use to specify a region of interest.",
                    "examples": [9719,29836]
                },
                "msa": {
                    "type": "string",
                    "default": "",
                    "description": "When the ground truth is available (e.g., simulation studies), a multiple sequence alignment of types making up the population can be provided, and additional checks are performed."
                }
            },
            "default": {},
            "type": "object"
        },
        "predicthaplo": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 10000
                },
                "time": {
                    "type": "integer",
                    "default": 1435
                },
                "threads": {
                    "type": "integer"
                },
                "read_min_length": {
                    "type": "integer",
                    "default": 0
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/predicthaplo.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "amplicons": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 256
                },
                "time": {
                    "type": "integer",
                    "default": 10
                },
                "mincooc": {
                    "type": "integer",
                    "default": 2,
                    "description": "Minimal number of coocurrences to search for in amplicon. Lowering this property to 1 will make COJAC also look for amplicon with singleton mutations.",
                    "examples": [ 1 ]
                }
            },
            "default": {},
            "type": "object"
        },
        "cooc": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 8192
                },
                "time": {
                    "type": "integer",
                    "default": 45
                },
                "threads": {
                    "type": "integer",
                    "default": 1
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/cojac.yaml"
                },
                "out_format": {
                    "type": "string",
                    "enum": ["lines","columns"],
                    "default": "lines",
                    "description": "Format of the output CSV.\n- `lines`(default) - each amplicon a separate entry on a separate line.\n- `columns` - one column per amplicon",
                    "examples": ["columns"]
                }
            },
            "default": {},
            "type": "object"
        },
        "mutlist": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 256
                },
                "time": {
                    "type": "integer",
                    "default": 10
                }
            },
            "default": {},
            "type": "object"
        },
        "sigmut": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 4096
                },
                "time": {
                    "type": "integer",
                    "default": 15
                }
            },
            "default": {},
            "type": "object"
        },
        "timeline": {
            "description": "This section is used to set up a timeline of the samples. Some output, e.g., deconvolution of quasispecies mixture using LolliPop, need to have a time component. By default it calls a script that uses regular expressions and look-up tables to extract this information from the samples' own names. But by using the properties `script` and `options` and adapting the environment provided in property `conda`, it is possible to heavily customize the actions (e.g. it is possible to query an external database instead). For inspiration, see the default script `file_parser.py`.",
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 1024
                },
                "time": {
                    "type": "integer",
                    "default": 15
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/timeline.yaml",
                    "description": "The default environment only provides regular expression functions (`python-reges`) but depending on your needs you would want to provide a custom environment with additional tools (e.g. drivers to query a databse, etc.)",
                    "example": ["custom_envs/ftp.yaml"]
                },
                "threads": {
                    "type": "integer",
                    "default": 1
                },
                "local": {
                    "type": "boolean",
                    "default": true,
                    "description": "Don't dispatch the timeline rule to the cluster for execution, run locally.",
                    "examples": [false]
                },
                "script": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/scripts/file_parser.py",
                    "description": "Script that sets up a timeline of the samples.\n\nIts purpose is to take the V-pipe's samples TSV file and add two columns:\n - _location_: location of the sampes\n - _date_: sampling date of the samples\n\nIt will receive the following parameters (in addition to what is specified in property _options_:\n - *--output &lt;OUTPUT&gt;*: the output TSV file that must be created by the script.\n - *&lt;SAMPLE_TSV&gt;*: the input samples TSV file\n\nFor an example, see the default script `file_parser.py`, it uses regular expressions (regex) to parse the first two columns (sample and batch names) and extract a date, and a location code that is further look-ed up in a table. It takes two additional parameters:\n - *--locations &lt;LOOKUP&gt;*: look-up TSV table mapping the code to full location names\n - *--regex_yaml &lt;YAML&gt;*: YAML file with regular expressions defining how the date and code are extracted.",
                    "example": ["custom_scripts/uploader.py"]
                },
                "options": {
                    "type": "string",
                    "default": " --no-fallback",
                    "description": "Additional options to be passed to the script, e.g. for an extra configuration file with database server information.\n\nBy default, passes an option to the default script to force always using the regex (do not fall back to copy-pasting columns).",
                    "example": ["--config custom_scripts/timeline.yaml"]
                },
                "locations_table": {
                    "type": "string",
                    "default": "",
                    "description": "Option for the default script: TSV table that maps location codes (e.g. short alphanumeric codes) used in sample names to full names of locations (e.g. city names).\n\nFor example:\n```tsv\ncode\tlocation\n10\tZÃ¼rich (ZH)\n16\tGenÃ¨ve (GE)\nBa\tBasel (BS)\n```",
                    "examples": [ "wastewater_plants.tsv" ]
                },
                "regex_yaml": {
                    "type": "string",
                    "default": "",
                    "description": "Option for the default script: YAML file the defines how to parse time series information out of the columns of _samples.tsv_, e.g.:\n\n```yaml\nsample: (?P<location>\\d+)_(?P<year>20\\d{2})_(?P<month>[01]?\\d)_(?P<day>[0-3]?\\d)\ndatefmt: \"%Y%m%d\"\n```\n\n- by default, _samples.tsv_'s first column (sample names) is used as-is for location codes and the second column (sequencing batch dates) is used for timeline's date point.\n- YAML's optional entry `sample` defines a regular expression to be applied on the first column (sample names)\n- YAML's optional entry `batch` defines a regular expression to be applied on the second column (sequencing batch dates)\n- regular expression **must** define the following [named capturing groups](https://www.regular-expressions.info/named.html):\n  - `location` used for the location codes\n  - `year`, `month`, `day` used for the dates of the timeline\n  - alternatively, if the date doesn't use a format with _year + month + day_ elements -- e.g., date uses week number of the year -- group `date` can be used to capture the whole date string\n- YAML's optional entry `datefmt` gives a [time format string](https://docs.python.org/3/library/time.html#time.strftime) to parse the `date` capturing group."
                }
            },
            "default": {},
            "type": "object"
        },
        "tallymut": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 4096
                },
                "time": {
                    "type": "integer",
                    "default": 30
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/xsv.yaml"
                },
                "timeline_file": {
                    "type": "string",
                    "default": "",
                    "description": "If set, this user-provided TSV file (e.g.: generated with an external tool, prior of running V-pipe) will be used for obtaining locations and dates -- as needed by LolliPop -- instead of generating `results/timeline.tsv` with the rule timeline.\nThis follows the following format (similar to the output of rule timeline):\n\n```tsv\nsample\tbatch\treads\tproto\tlocation_code\tdate\tlocation\nA1_05_2023_04_12\t20230428_HNG5MDRX2\t250\tv41\t5\t2023-04-12\tLugano (TI)\nA2_10_2023_04_13\t20230428_HNG5MDRX2\t250\tv41\t10\t2023-04-13\tZÃ¼rich (ZH)\nA3_16_2023_04_14\t20230428_HNG5MDRX2\t250\tv41\t16\t2023-04-14\tGenÃ¨ve (GE)\nâ¦\n```\n\n- The extra columns _location_ and _data_ are **necessary** for LolliPop.\n- Columns _sample_, _batch_, _reads_ and  _proto_ are simply the fist four columns of `samples.tsv`\n  - V-pipe only needs column _sample_ and _batch_ for now.",
                    "example": ["db_timeline.tsv"]
                }
            },
            "default": {},
            "type": "object"
        },
        "deconvolution": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 4096
                },
                "time": {
                    "type": "integer",
                    "default": 240
                },
                "threads": {
                    "type": "integer",
                    "default": 4
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/lollipop.yaml"
                },
                "deconvolution_config": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/../resources/cowwid/deconv_linear_logit_quasi_strat.yaml",
                    "description": "Configuration file with parameters for kernel deconvolution",
                    "examples": [ "/git/lollipop/deconv_linear_logit_quasi_strat.yaml", "/git/lollipop/deconv_linear_wald.yaml", "/git/lollipop/deconv_bootstrap" ]

                },
                "variants_config": {
                    "type": "string",
                    "default": "",
                    "description": "Variants configuration used during deconvolution",
                    "examples": [ "var_conf.yaml" ]
                },
                "variants_dates": {
                    "type": "string",
                    "default": "",
                    "description": "Variants to scan per periods (as determined with COJAC by leveraging the output of the cooc rule)",
                    "examples": [ "var_dates.yaml" ]
                },
                "out_format": {
                    "type": "string",
                    "enum": ["lines","columns"],
                    "default": "lines",
                    "description": "Format of the output CSV.\n- `lines`(default) - each variants a separate entry on a separate line.\n- `columns` - one column per variant",
                    "examples": ["columns"]
                },
                "filters": {
                    "type": "string",
                    "default": "",
                    "description": "List of filters for removing problematic mutations from tally. Some mutations might be problematic and need to be taken out -- e.g. due to drop-outs in the multiplex PCR amplification, they do not show up in the data and this could be misinterpreted by LolliPop as proof of absence of a variant.",
                    "examples": ["filters_preprint.yaml"]
                }
            },
            "default": {},
            "type": "object"
        },
        "web_visualization": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/visualization.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "diversity": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 2000
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/diversity_measures.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "dehuman": {
            "properties": {
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/dehuman.yaml"
                },
                "mem": {
                    "type": "integer",
                    "default": 4096
                },
                "time": {
                    "type": "integer",
                    "default": 235
                },
                "threads": {
                    "type": "integer",
                    "default": 4
                },
                "ref_host": {
                    "type": "string",
                    "default": "references/human.fa.gz",
                    "description": "Host's genome used to remove reads (e.g. human genome)\n\n**Note:** if this file is absent, it is possible to fetch it from a remote server, see property `ref_host_url` below.",
                    "examples": ["/cluster/project/igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/BWAIndex/genome.fa"]
                },
                "ref_host_url": {
                    "type": "string",
                    "default": "http://ftp.ensembl.org/pub/current_fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz",
                    "description": "If the host's genome specified in property `ref_host` isn't present, fetch it from a remote server.\n\n**Note** remember to set aside enough memory for the indexing rule, see section `ref_bwa_index` property `mem`.",
                    "examples": [ "http://ftp.ensembl.org/pub/release-105/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz", "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/000/001/405/GCA_000001405.29_GRCh38.p14/GCA_000001405.29_GRCh38.p14_genomic.fna.gz"]
                },
                "keep_host": {
                    "type": "boolean",
                    "default": false,
                    "description": "Indicate whether to store the host-aligned reads in a CRAM file `â¦/alignments/host_aln.cram`.",
                    "examples": [true]
                },
                "catchup": {
                    "type": "boolean",
                    "default": false,
                    "description": "Use this option when generating dehumanized raw reads (`dehuman.cram`) on old samples _**that have already**_ been processed in the past --- a _catch up_.\n\nNormally, removing host-mapping reads requires analyzing reads which were rejected by V-pipe's main processing (as specified in section `general`, property `aligner`). But this output is considered temporary and will get deleted by Snakemake once the processing of a sample has finished. To generate `dehuman.cram` V-pipe would need to run the aligner again, which will both regenerate the data necessary for this output but also generate a new alignment which will trigger the whole workflow again.\nUse this property `catchup` to only generate the input necessary for `dehuman.cram`, leaving untouched the alignment and everything else that has already been processed.",
                    "examples": [true]
                }
            },
            "default": {},
            "type": "object"
        },
        "checksum": {
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 256
                },
                "time": {
                    "type": "integer",
                    "default": 60
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/upload.yaml"
                }
            },
            "default": {},
            "type": "object"
        },
        "upload": {
            "description": "This section is used to assist and prepare uploads of the data, e.g. to European Nucleotide Archive. By default it calls a script that creates symlinks making it easy to identify new/updated samples between calls of V-pipe. But by using the properties `script` and `options` and adapting the environment provided in property `conda`, it is possible to heavily customize the actions (e.g. it is possible to upload to an SFTP server by calling `sftp` from a modified script). For inspiration, see the default script `prepare_upload_symlinks.sh`.",
            "properties": {
                "mem": {
                    "type": "integer",
                    "default": 256
                },
                "time": {
                    "type": "integer",
                    "default": 60
                },
                "conda": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/envs/upload.yaml",
                    "description": "The default environment only provides hashing functions (`xxhash`, linux coreutils' `sha`_{nnn}_`sum` collection, etc.) but depending on your needs you would want to provide a custom environment with additional tools (e.g. `sftp`, `rsync`, `curl`, `lftp`, custom specialized cloud uploaders, etc.)",
                    "example": ["custom_envs/ftp.yaml"]
                },
                "threads": {
                    "type": "integer",
                    "default": 1
                },
                "local": {
                    "type": "boolean",
                    "default": true,
                    "description": "Don't dispatch the rule to the cluster for execution, run locally.",
                    "examples": [false]
                },
                "consensus": {
                    "type": "string",
                    "default": "ambig",
                    "enum": ["ambig", "majority"],
                    "description": "When preparing data for upload, specifies which consensus sequence should be uploaded.",
                    "examples": ["majority"]
                },
                "checksum": {
                    "type": "boolean",
                    "default": false,
                    "description": "Generate checksum for each individual consensus sequence (if a consensus is regenerated, it will help determine whether the new file has changed content or is virtually the same as the previous).",
                    "examples": [true]
                },
                "orig_fastq": {
                    "type": "boolean",
                    "default": false,
                    "description": "Also include the original `.fastq.gz` sequencing reads files from `raw_data/` in the list of files to be uploaded. See property `orig_cram` below for a compressed version and see output `dehumanized_raw_reads` and section `dehuman` for depleting reads from the host.",
                    "examples": [true]
                },
                "orig_cram": {
                    "type": "boolean",
                    "default": false,
                    "description": "Also include a compressed version of the original sequencing raw reads files from `raw_data/`. Similar to property `orig_fastq` above, but with reference-based compression.",
                    "examples": [true]
                },
                "script": {
                    "type": "string",
                    "default": "{VPIPE_BASEDIR}/scripts/prepare_upload_symlinks.sh",
                    "description": "Custom script that assists and prepares uploads.\n\nIt will receive the following positional parameters:\n - _&lt;OUTPUT&gt;_: the output file that must be created by the script.\n - *&lt;SAMPLE_ID&gt;*: a string (with no path separator slashes) that can be used as a name, uniquely identifying the sample and the date.\n - *&lt;SAMPLE_DIR&gt;*: the base directory of the sample.\n - *&lt;UPLOAD_FILES&gt;*...: a list of files to consider for upload\n\nFor an example, see the default script `prepare_upload_symlinks.sh`, it generates symlinks that help tracking which samples are new and/or updated between runs of V-pipe and thus should be considered for upload.",
                    "example": ["custom_scripts/uploader.py"]
                },
                "options": {
                    "type": "string",
                    "default": "",
                    "description": "Named options to be passed to the script, before the positional parameters. E.g. for an extra configuration file with SFTP server information.",
                    "example": ["--config custom_scripts/uploader.yaml --"]
                }
            },
            "default": {},
            "type": "object"
        }
    }
}
